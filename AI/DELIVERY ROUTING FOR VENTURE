"""
A delivery person is given a list of dropoff locations for his daily route. 
note that"i am not biased its just the problem statement that said _"his"_ :) "
Our goal then is to reach all of our target destinations in as short of a distance as possible. 
Alternatively, we could also consider other objectives to optimize for, either separately or at the same time:
shortest time
number of left turns
avoiding highways
eco-friendly routes
avoid residential areas
"""

import pandas as pd
import math
import numpy as np
import random
import time
import matplotlib.pyplot as plt
import osmnx as ox
import networkx as nx
from tqdm.notebook import tqdm
from smart_mobility_utilities.poi import poi, drawPOIS, drawRouteOrder

file_path = ".csv"
df = pd.read_csv(file_path)
numberOfStops = len(df)
POIS = []
for _ in df.itertuples():
    POIS.append(poi(_.Address,"canada",_.Latitude, _.Longitude))
POIS

drawPOIS(POIS, zoom=10)
G = nx.DiGraph()
G.add_nodes_from(POIS)

durations = []
pbar = tqdm(total=len(G.nodes())**2)
for source in G.nodes():
    duration = []
    for destination in G.nodes():
        pbar.update()
        if source == destination: 
            duration.append(0)
            continue
        G.add_edge(source, destination, route = source.route_to(destination))
        route = source.route_to(destination)
        duration.append(route['duration'])
    durations.append(duration)

trip = np.array(durations)
trip

# define a function that can compute the fitness value of each solution in the population
def cal_pop_objective_1(m, pop):
    M = np.zeros([8,numberOfStops-1])
    fitness = np.zeros(8)
    for i in range(8):
        for j in range(numberOfStops-1):
            M[i,j] = m[pop[i,j]-1,pop[i,j+1]-1]
    for k in range(8):
        fitness[k] = np.sum(M[k])
    return fitness

# define a function that can select the best individuals in the current generation as the parents to produce the offsprings
def select_mating(pop, fitness, num_parents):
    parents = np.zeros([num_parents, pop.shape[1]])
    for parent_num in range(num_parents):
        min_fitness_index = np.where(fitness == np.min(fitness))
        min_fitness_index = min_fitness_index[0][0]
        parents[parent_num, :] = pop[min_fitness_index, :]
        fitness[min_fitness_index] = 999999999
    return parents


# you would notice its similar to genetic wherein we used to perform mutation springover and related crossover things 
# lmk via an email to upload a specified questions and its answer in a numerical format as i use to perform many question numericall on paper and then i use to writ them its a perfect habit in any case 

def crossover(mum, dad):
    size = len(mum)
    shalin, mahir = [-1] * size, [-1] * size
    start, end = sorted([random.randrange(size) for _ in range(2)])
    shalin_inherited = []
    for i in range(start, end + 1):
        shalin[i] = mum[i]
        shalin_inherited.append(mum[i])
    current_dad_position, current_mum_position = 0, 0
    fixed_pos = list(range(start, end + 1))
    i = 0
    while i < size:
        if i in fixed_pos:
            i += 1
            continue
        test_shalin = shalin[i]
        if test_shalin == -1:
            dad_trait = dad[current_dad_position]
            while dad_trait in shalin_inherited:
                dad_trait = dad[current_dad_position]
                current_dad_position += 1
            shalin[i] = dad_trait
            shalin_inherited.append(dad_trait)
        i += 1
    return shalin

def mutation(offspring_crossover):
    a = random.randint(0, numberOfStops - 1)
    b = random.randint(0, numberOfStops - 1)
    for i in range(offspring_crossover.shape[0]):
        mut_1 = offspring_crossover[i, a]
        mut_2 = offspring_crossover[i, b]
        offspring_crossover[i, a] = mut_2
        offspring_crossover[i, b] = mut_1
    return offspring_crossover



sol_per_pop = 8
num_parents_mating = 4
num_offsprings = 4
pop_size = (sol_per_pop, trip.shape[1])
offspring_size = (num_offsprings, trip.shape[1])
new_population = np.zeros(pop_size)
for i in range(8):
    new_population[i] = np.arange(1, numberOfStops + 1)
    random.shuffle(new_population[i])
new_population = new_population.astype(int)

best_outputs = []
num_of_generation = 30000
running_time = np.zeros(num_of_generation)

for generation in tqdm(range(num_of_generation), total=num_of_generation):
    start_time = time.time()
    fitness = cal_pop_objective_1(trip, new_population)
    best_outputs.append(np.min(fitness))
    parents = select_mating(new_population, fitness, num_parents_mating)
    offspring_crossover = np.zeros(offspring_size)
    r_1 = np.random.random()
    if r_1 < 0.7:
        offspring_crossover[0] = crossover(parents[0], parents[1])
        offspring_crossover[1] = crossover(parents[1], parents[0])
        offspring_crossover[2] = crossover(parents[2], parents[3])
        offspring_crossover[3] = crossover(parents[3], parents[2])
    else:
        offspring_crossover[0] = parents[0]
        offspring_crossover[1] = parents[1]
        offspring_crossover[2] = parents[2]
        offspring_crossover[3] = parents[3]
    r_2 = np.random.random()
    if r_2 < 0.05:
        offspring_mutation = mutation(offspring_crossover)
    else:
        offspring_mutation = offspring_crossover
    new_population[0:parents.shape[0], :] = parents
    new_population[parents.shape[0]:, :] = offspring_mutation
    running_time[generation] = time.time() - start_time


fitness = cal_pop_objective_1(trip, new_population)
best_index = np.where(fitness == np.min(fitness))
running_time = running_time.cumsum()
convergence_index = np.where(best_outputs == np.min(best_outputs))
convergence_time = running_time[convergence_index]

print("Best solution:", new_population[best_index, :][0][0])
print("Best fitness:", fitness[best_index][0])
print("The algorithm converges in", np.min(convergence_index), "iterations.")
print("The algorithm converges in", np.min(convergence_time), "seconds.")

#plotting stuf
fig, ax = plt.subplots(2, figsize=(8, numberOfStops - 2))
ax[0].plot(best_outputs, 'green')
ax[0].set_xlabel("Iteration", fontsize=10)
ax[0].set_ylabel("Fitness", fontsize=10)
ax[0].set_title("GA (Fitness vs # of iterations)   1 station", fontsize=12)
ax[1].plot(running_time, best_outputs, 'red')
ax[1].set_xlabel("Running time/s", fontsize=10)
ax[1].set_ylabel("Fitness", fontsize=10)
ax[1].set_title("GA (Fitness vs Running time)   1 station", fontsize=12)
plt.show()


